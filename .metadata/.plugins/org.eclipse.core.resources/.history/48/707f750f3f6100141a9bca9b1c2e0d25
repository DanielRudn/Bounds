package com.dr.bounds.screens;

import java.util.ArrayList;

import com.DR.dLib.AnimationStatusListener;
import com.DR.dLib.CircleFillAnimation;
import com.DR.dLib.dImage;
import com.DR.dLib.dScreen;
import com.DR.dLib.dText;
import com.DR.dLib.dTweener;
import com.DR.dLib.dUICard;
import com.DR.dLib.dUICardList;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.Texture.TextureFilter;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.dr.bounds.MainGame;
import com.dr.bounds.ui.LoadingIcon;
import com.dr.bounds.ui.PlayerCard;

public class InviteScreen extends dUICardList implements AnimationStatusListener {

	// title card to be displayed at the top
	private dUICard titleCard;
	// timer for showing the transition animation to this screen
	private final float SHOW_DURATION = 3f;
	// time to show list of cards
	private float showCardTime = 0;
	private final float SHOW_CARD_DURATION = 2f;
	// animation that plays when showing this screen
	private CircleFillAnimation startAnimation;
	private static final int START_ANIM_ID = 12345;
	private static final int CARDS_ANIM_ID = 23456;
	private dImage circleCover;
	// loading icon that shows while players are being loaded
	private LoadingIcon loadingIcon;
	
	public InviteScreen(float x, float y, Texture texture, ArrayList<dUICard> list) {
		super(x, y, texture, list);
		titleCard = new dUICard(0,0,texture);
		titleCard.setDimensions(getWidth(), 92f);
		titleCard.setColor(new Color(16f/256f, 174f/256f, 73f/256f,1f));
		titleCard.setHasShadow(false);
		dText titleText = new dText(0,0,64f,"INVITE");
		titleText.setColor(Color.WHITE);
		titleCard.addObject(titleText, dUICard.CENTER, dUICard.CENTER);
		setTitleCard(titleCard);
		// move title card upwards so that it can slide in for the show animation
		titleCard.setY(titleCard.getY() - titleCard.getHeight() - getPadding());
		// move the list up too
		for(int i = 0; i < getSize(); i++)
		{
			getListItem(i).setY(-getListItem(i).getHeight() - getPadding());
		}
		setColor(Color.NAVY);
		// temp, remove
		setAlpha(0);
		Texture circle = new Texture("circle.png");
		circle.setFilter(TextureFilter.Linear, TextureFilter.Linear);
		circleCover = new dImage(0,0,circle);
		startAnimation = new CircleFillAnimation(circleCover, SHOW_DURATION, this, START_ANIM_ID, new Color(46f/256f, 204f/256f, 113f/256f,1f));
		
		loadingIcon = new LoadingIcon(getWidth()/2f - circle.getWidth() / 2f,getHeight()/2f - circle.getHeight() / 2f,circle);
	}
	
	@Override
	public void update(float delta)
	{
		super.update(delta);
		startAnimation.update(delta);
		
		if(showTime >= SHOW_DURATION && showCardTime >= SHOW_CARD_DURATION)
		{
			for(int x = 0; x < getSize(); x++)
			{
				if(getListItem(x).isVisible() && getListItem(x).isClicked())
				{
					MainGame.requestHandler.sendInvite(((PlayerCard) getListItem(x)).getPlayerID());
					MainGame.currentScreen.switchScreen(MainGame.waitingRoomScreen);
				}
			}
		}
	}
	
	@Override
	public void render(SpriteBatch batch)
	{
		circleCover.render(batch);
		loadingIcon.render(batch);
		super.render(batch);
	}
	
	public void showCards()
	{
		showCardTime = 0;
		loadingIcon.stop();
	}
	
	@Override
	public void show()
	{
		super.show();
		startAnimation.start();
	}

	@Override
	public void goBack() {
		if(MainGame.previousScreen != null)
		{
			switchScreen(MainGame.previousScreen);
		}
	}

	@Override
	public void switchScreen(dScreen newScreen) {
		this.hide();
		newScreen.show();
		MainGame.currentScreen = newScreen;
		MainGame.previousScreen = this;
	}

	@Override
	public void onAnimationStart(int ID, float duration) {
		if(ID == START_ANIM_ID)
		{
			setTitleCard(titleCard);
			titleCard.setY(-titleCard.getHeight() * 1.5f);
		}
		else if(ID == CARDS_ANIM_ID)
		{
			
		}
	}

	@Override
	public void whileAnimating(int ID, float time, float duration, float delta) {
		if(ID == START_ANIM_ID)
		{
			// bring in the title card
			if(time >= .6f)
			{
				titleCard.setY(dTweener.ElasticOut(time - .6f, -titleCard.getHeight() - getPadding(), titleCard.getHeight() + getPadding(), duration - .6f,5f));
			}
		}
		else if(ID == CARDS_ANIM_ID)
		{
			
		}
	}
	
	@Override
	public void onAnimationFinish(int ID) {
		// animation finished
		// replace circle cover with the card cover

	}

}
