package com.dr.bounds.animations;

import java.util.ArrayList;

import com.DR.dLib.dTweener;
import com.DR.dLib.animations.AnimationStatusListener;
import com.DR.dLib.animations.dAnimation;
import com.DR.dLib.ui.dUICard;
import com.dr.bounds.MainGame;

public class ShopItemsSlideAnimation extends dAnimation {
	
	private ArrayList<dUICard> items;
	private ArrayList<Float> startX;
	private static final float DELAY = 0.1f;

	public ShopItemsSlideAnimation(float duration,	AnimationStatusListener listener, int ID, ArrayList<dUICard> objectToAnimate) {
		super(duration, listener, ID, null);
		items = objectToAnimate;
		startX = new ArrayList<Float>();
	}

	@Override
	protected void animate(float time, float duration, float delta) 
	{
		if(startX.size() > 0)
		{
			for(int x= 0; x < items.size(); x++)
			{
				items.get(x).setPos(items.get(x).getX(), dTweener.ExponentialEaseOut(time - DELAY*x, startX.get(x), -MainGame.VIRTUAL_HEIGHT*2f, duration - DELAY*x));
			}
		}
	}
	
	@Override
	public void start()
	{
		super.start();
		startX.clear();
		for(int x = 0; x < items.size(); x++)
		{
			items.get(x).setPos(items.get(x).getX(),items.get(x).getY() + MainGame.VIRTUAL_HEIGHT*2f);
			startX.add(items.get(x).getX());
		}
	}

}
