package com.dr.bounds.maps;

import com.DR.dLib.dImage;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.MathUtils;
import com.dr.bounds.Player;

public class dPlanetObstacle extends dObstacle {

	// whether this planet has a moon orbiting it
	private boolean hasMoon = false;
	// the moon object
	private dImage moonImage;
	// the x value for the moon rotation
	private float rotationTime = 0;
	private float rotationDuration = 2f;
	
	public dPlanetObstacle(float x, float y, Texture texture, Player p) {
		super(x, y, texture, p);
		int moonProbability = MathUtils.random(3);
		if(moonProbability == 0 || moonProbability == 1)
		{
			hasMoon = false;
		}
		else if(moonProbability == 2)
		{
			hasMoon = true;
			moonImage = new dImage(0,0,texture);
			moonImage.setPos(getX() - 15, getY() - 15);
		}
	}
	
	@Override
	public void render(SpriteBatch batch)
	{
		super.render(batch);
		if(hasMoon)
		{
			moonImage.render(batch);
		}
	}
	
	@Override
	public void update(float delta)
	{
		super.update(delta);
		if(hasMoon)
		{
			if(rotationTime <= rotationDuration)
			{
				rotationTime+=delta;
			}
			moonImage.setPos((float) (moonImage.getX() + Math.cos(rotationTime)), (float)(moonImage.getY() + Math.sin(rotationTime)));
		}
	}
	
	@Override
	public void setPos(float x, float y)
	{
		super.setPos(x, y);
		moonImage.setPos(getX() - 15, getY() - 15);
	}
	
	@Override
	public void setX(float x)
	{
		super.setX(x);
		moonImage.setPos(getX() - 15, getY() - 15);
	}
	
	@Override
	public void setY(float y)
	{
		super.setY(y);
		moonImage.setPos(getX() - 15, getY() - 15);
	}

}
