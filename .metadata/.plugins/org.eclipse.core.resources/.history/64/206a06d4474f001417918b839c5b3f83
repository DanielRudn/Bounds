package com.dr.bounds.maps;

import java.util.ArrayList;
import java.util.Random;

import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;

public class MapGenerator {

	// map generation type
	public static final int TYPE_DEFAULT = 1515, TYPE_SPACE = 3030;
	// the current map generation type
	private int currentType = TYPE_DEFAULT; 
	// ArrayList of obstacles in map, in an arraylist for easy adding/removing and modifying
	private ArrayList<dObstacle> obstacles = new ArrayList<dObstacle>();
	// Random number generator for positioning objects
	private Random rng = new Random();
	// Minimum vertical(y) distance between obstacles
	private final int MIN_DISTANCE = -75;
	// seed for random number generator
	
	/**
	 * Creates a new generator and sets the level type
	 * @param mapType Type of map to generate, use static attributes from this class as parameters
	 */
	public MapGenerator(int mapType, Texture obstacleTexture)
	{
		setMapType(mapType);
		// add 5 obstacles to start with
		for(int x = 0; x <=  5; x++)
		{
			obstacles.add(new dObstacle(-100,-100, obstacleTexture));
		}
	}
	
	public void update(float delta)
	{
		// loop through all obstacles
		for(int x = 0; x < obstacles.size(); x++)
		{
			obstacles.get(x).update(delta);
			if(currentType == TYPE_DEFAULT)
			{
				if(obstacles.get(x).shouldRegenerate())
				{
					int side = rng.nextInt(2); // 0 is LEFT, 1 is RIGHT
					if(side == 0)// left
					{
						
					}
					else if(side == 1)// right
					{
						
					}
					obstacles.get(x).setY(obstacles.get(getNextIndex(x)).getY() + MIN_DISTANCE);
					obstacles.get(x).setRegenerate(false);
				}
			}
			else if(currentType == TYPE_SPACE)
			{
				
			}
		}
	}
	
	private int getNextIndex(int i)
	{
		if(i == obstacles.size()-1)
		{
			return 0;
		}
		return i++;
	}
	
	private int getPreviousIndex(int i)
	{
		if(i == 0)
		{
			return obstacles.size() - 1;
		}
		return i--;
	}
	
	public void render(SpriteBatch batch)
	{
		for(int x = 0; x < obstacles.size(); x++)
		{
			obstacles.get(x).render(batch);
		}
	}
	
	public void setMapType(int mapType)
	{
		if(mapType != TYPE_DEFAULT || mapType != TYPE_SPACE)
		{
			currentType = TYPE_DEFAULT;
		}
		else
		{
			currentType = mapType;
		}
	}
	
	public int getMapType()
	{
		return currentType;
	}
	
	public long getSeed()
	{
		return seed;
	}
}
